{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ModalJogar from \"../../../components/Modals/ModalJogar\";\nimport ModalLoading from \"../../../components/Modals/ModalLoading\";\nimport CidadesDao from \"../../../db/CidadeDao\";\nimport EstadosDao from \"../../../db/EstadoDao\";\nimport Fundo from \"../../../assets/FundoTelaUser.png\";\nimport AlertButtons from \"../../../components/Modals/AlertButtons\";\nimport { AppContext } from \"../../../App\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Jogar() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      abrirButtons = _useState4[0],\n      setAbrirButtons = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      iniciar = _useState6[0],\n      setIniciar = _useState6[1];\n\n  var _useContext = useContext(AppContext),\n      listaCompleta = _useContext.listaCompleta,\n      setListaCompleta = _useContext.setListaCompleta;\n\n  var objCompleto = Array();\n  useEffect(function () {\n    var estados = Array();\n\n    var buscarCidades = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(CidadesDao.GetCidades().then(function (v) {\n                var listaCidades = Array();\n\n                if (Platform.OS === 'android') {\n                  listaCidades = v._array;\n                } else {\n                  listaCidades = v;\n                }\n\n                estados.forEach(function (estado) {\n                  var cidadesEstado = listaCidades.filter(function (obj) {\n                    return obj.idEstado == estado.id;\n                  });\n                  var cidadeSorteada = cidadesEstado.slice().sort(function () {\n                    return 0.5 - Math.random();\n                  }).slice(0, 1);\n                  var cidadesAleatórias = listaCidades.filter(function (obj) {\n                    return obj.idEstado != estado.id;\n                  }).slice().sort(function () {\n                    return 0.5 - Math.random();\n                  }).slice(0, 3);\n                  var listaCidadesUnidas = cidadesAleatórias.concat(cidadeSorteada);\n                  var sortearCidadesUnidas = listaCidadesUnidas.slice().sort(function () {\n                    return 0.5 - Math.random();\n                  }).slice(0, 4);\n                  var obj = {\n                    estado: {\n                      id: estado.id,\n                      nome: estado.nome\n                    },\n                    cidades: sortearCidadesUnidas\n                  };\n                  objCompleto.push(obj);\n                });\n                setListaCompleta(objCompleto);\n              }).catch(function (e) {\n                return console.log(e.message);\n              }).finally(function () {\n                setLoading(false), setAbrirButtons(true), setIniciar(false);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var buscarEstados = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(EstadosDao.GetEstados().then(function (v) {\n                var listaEstados = Array();\n\n                if (Platform.OS === 'android') {\n                  listaEstados = v._array;\n                } else {\n                  listaEstados = v;\n                }\n\n                var estadosSorteados = listaEstados.slice().sort(function () {\n                  return 0.5 - Math.random();\n                }).slice(0, 10);\n                estados = estadosSorteados;\n                setTimeout(function () {\n                  return buscarCidades();\n                }, 5000);\n              }));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    buscarEstados();\n  }, []);\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsxs(ImageBackground, {\n      source: Fundo,\n      style: {\n        flex: 1,\n        padding: 10\n      },\n      children: [_jsx(ModalLoading, {\n        loading: loading,\n        message: \"Escolhendo Cidades\"\n      }), _jsx(AlertButtons, {\n        visible: abrirButtons,\n        title: \"Iniciar jogo\",\n        subTitle: 'Você está prestes a iniciar o jogo, clique em iniciar para começar o jogo!',\n        buttons: [{\n          label: 'Iniciar',\n          onPress: function onPress(r) {\n            setIniciar(true);\n            setAbrirButtons(r);\n          }\n        }]\n      }), _jsx(ModalJogar, {\n        loading: iniciar,\n        onClose: setIniciar,\n        value: objCompleto\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useContext","useEffect","useState","ModalJogar","ModalLoading","CidadesDao","EstadosDao","Fundo","AlertButtons","AppContext","Jogar","loading","setLoading","abrirButtons","setAbrirButtons","iniciar","setIniciar","listaCompleta","setListaCompleta","objCompleto","Array","estados","buscarCidades","GetCidades","then","v","listaCidades","Platform","OS","_array","forEach","estado","cidadesEstado","filter","obj","idEstado","id","cidadeSorteada","slice","sort","Math","random","cidadesAleatórias","listaCidadesUnidas","concat","sortearCidadesUnidas","nome","cidades","push","catch","e","console","log","message","finally","buscarEstados","GetEstados","listaEstados","estadosSorteados","setTimeout","flex","padding","label","onPress","r"],"sources":["D:/Projects/Aula/LocalityMap/scenes/Quizes/Jogar/index.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\r\nimport { Platform, SafeAreaView, ImageBackground } from 'react-native'\r\nimport ModalJogar from '../../../components/Modals/ModalJogar'\r\nimport ModalLoading from '../../../components/Modals/ModalLoading'\r\nimport CidadesDao from '../../../db/CidadeDao'\r\nimport EstadosDao from '../../../db/EstadoDao'\r\nimport Fundo from '../../../assets/FundoTelaUser.png'\r\nimport AlertButtons from '../../../components/Modals/AlertButtons'\r\nimport { AppContext } from '../../../App'\r\n\r\nexport default function Jogar() {\r\n    const [loading, setLoading] = useState(true)\r\n    const [abrirButtons, setAbrirButtons] = useState(false)\r\n    const [iniciar, setIniciar] = useState(false)\r\n    const { listaCompleta, setListaCompleta  } = useContext(AppContext)\r\n    var objCompleto = Array()\r\n\r\n    useEffect(() => {\r\n        var estados = Array()\r\n        const buscarCidades = async () => {\r\n            await CidadesDao.GetCidades()\r\n                .then((v) => {\r\n                    var listaCidades = Array()\r\n                    if (Platform.OS === 'android') {\r\n                        listaCidades = v._array\r\n                    } else {\r\n                        listaCidades = v\r\n                    }\r\n                    estados.forEach((estado) => {\r\n                        const cidadesEstado = listaCidades.filter(obj => obj.idEstado == estado.id)\r\n                        var cidadeSorteada = cidadesEstado.slice().sort(() => 0.5 - Math.random()).slice(0, 1)\r\n                        const cidadesAleatórias = (listaCidades.filter(obj => obj.idEstado != estado.id)).slice().sort(() => 0.5 - Math.random()).slice(0, 3)\r\n                        const listaCidadesUnidas = cidadesAleatórias.concat(cidadeSorteada)\r\n                        const sortearCidadesUnidas = listaCidadesUnidas.slice().sort(() => 0.5 - Math.random()).slice(0, 4)\r\n\r\n                        const obj = { estado: { id: estado.id, nome: estado.nome }, cidades: sortearCidadesUnidas }\r\n                        objCompleto.push(obj)\r\n                    })\r\n                    setListaCompleta(objCompleto)\r\n                })\r\n                .catch((e) => console.log(e.message))\r\n                .finally(() => { setLoading(false), setAbrirButtons(true), setIniciar(false) })\r\n        }\r\n\r\n        const buscarEstados = async () => {\r\n            setLoading(true)\r\n            await EstadosDao.GetEstados()\r\n                .then((v) => {\r\n\r\n                    var listaEstados = Array()\r\n                    if (Platform.OS === 'android') {\r\n                        listaEstados = v._array\r\n                    } else {\r\n                        listaEstados = v\r\n                    }\r\n                    var estadosSorteados = listaEstados.slice().sort(() => 0.5 - Math.random()).slice(0, 10)\r\n                    estados = estadosSorteados\r\n                    setTimeout(() => buscarCidades(), 5000)\r\n                })\r\n        }\r\n        buscarEstados()\r\n    }, [])\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n            <ImageBackground source={Fundo} style={{ flex: 1, padding: 10 }}>\r\n                <ModalLoading loading={loading} message=\"Escolhendo Cidades\" />\r\n                <AlertButtons\r\n                    visible={abrirButtons}\r\n                    title={\"Iniciar jogo\"}\r\n                    subTitle={'Você está prestes a iniciar o jogo, clique em iniciar para começar o jogo!'}\r\n                    buttons={[\r\n                        {\r\n                            label: 'Iniciar',\r\n                            onPress: (r) => {\r\n                                setIniciar(true)\r\n                                setAbrirButtons(r)\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                <ModalJogar loading={iniciar} onClose={setIniciar} value={objCompleto} />\r\n            </ImageBackground>\r\n        </SafeAreaView>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}