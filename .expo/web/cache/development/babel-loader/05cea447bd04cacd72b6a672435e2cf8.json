{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ModalLoading from \"../Modals/ModalLoading\";\nimport PaisDao from \"../../db/PaisDao\";\nimport EstadosDao from \"../../db/EstadoDao\";\nimport CidadesDao from \"../../db/CidadeDao\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function BuscarDados() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      paises = _useState6[0],\n      setPaises = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      estados = _useState8[0],\n      setEstatos = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      cidades = _useState10[0],\n      setCidades = _useState10[1];\n\n  var buscarPaises = function _callee2() {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            axios.get(\"https://servicodados.ibge.gov.br/api/v1/paises\").then(function (r) {\n              if (r.data.length > 0) {\n                var salvar = function _callee() {\n                  return _regeneratorRuntime.async(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          r.data.map(function (v) {\n                            var obj = {\n                              id: v.id[\"M49\"],\n                              sigla: v.id[\"ISO-3166-1-ALPHA-2\"],\n                              nome: v.nome.abreviado\n                            };\n                            PaisDao.Insert(obj);\n                          });\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                salvar();\n              }\n            }).catch(function (e) {\n              console.log(\"Erro ao buscar cidades: \" + e.message);\n            }).finally(function () {\n              console.log(\"Acabou Aqui\");\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var buscarEstados = function _callee4() {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            axios.get(\"https://servicodados.ibge.gov.br/api/v1/localidades/estados\").then(function (r) {\n              if (r.data.length > 0) {\n                var salvar = function _callee3() {\n                  return _regeneratorRuntime.async(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          r.data.map(function (v) {\n                            var obj = {\n                              id: v.id,\n                              idRegiao: v.regiao.id,\n                              idPais: 76,\n                              sigla: v.sigla,\n                              nome: v.nome\n                            };\n                            EstadosDao.Insert(obj);\n                          });\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                salvar();\n              }\n            }).catch(function (e) {\n              console.log(\"Erro ao buscar cidades: \" + e.message);\n            }).finally(function () {});\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var buscarCidades = function _callee6() {\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            axios.get(\"https://servicodados.ibge.gov.br/api/v1/localidades/municipios\").then(function (r) {\n              if (r.data.length > 0) {\n                var salvar = function _callee5() {\n                  return _regeneratorRuntime.async(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          r.data.map(function (v) {\n                            var obj = {\n                              id: v.id,\n                              idRegiao: v.microrregiao.mesorregiao[\"UF\"].regiao.id,\n                              idEstado: v.microrregiao.mesorregiao[\"UF\"].id,\n                              nome: v.nome\n                            };\n                            CidadesDao.Insert(obj);\n                          });\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                salvar();\n              }\n            }).catch(function (e) {\n              console.log(\"Erro ao buscar cidades: \" + e.message);\n            }).finally(function () {});\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    setLoading(true);\n    setMessage(\"Buscando Paises\");\n    buscarPaises();\n    setMessage(\"Buscando Estados\");\n    buscarEstados();\n    buscarCidades();\n    setTimeout(function () {\n      return setLoading(false);\n    }, 10000);\n  }, [setMessage, message]);\n  return _jsx(View, {\n    children: _jsx(ModalLoading, {\n      loading: loading,\n      onClose: setLoading,\n      message: message\n    })\n  });\n}","map":{"version":3,"sources":["D:/Projects/Aula/LocalityMap/components/Ultils/BuscarDados.js"],"names":["React","useEffect","useState","axios","ModalLoading","PaisDao","EstadosDao","CidadesDao","BuscarDados","loading","setLoading","message","setMessage","paises","setPaises","estados","setEstatos","cidades","setCidades","buscarPaises","get","then","r","data","length","salvar","map","v","obj","id","sigla","nome","abreviado","Insert","catch","e","console","log","finally","buscarEstados","idRegiao","regiao","idPais","buscarCidades","microrregiao","mesorregiao","idEstado","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport axios from \"axios\"\r\nimport { View } from \"react-native\"\r\nimport ModalLoading from \"../Modals/ModalLoading\"\r\nimport PaisDao from \"../../db/PaisDao\"\r\nimport EstadosDao from \"../../db/EstadoDao\"\r\nimport CidadesDao from \"../../db/CidadeDao\"\r\n\r\nexport default function BuscarDados() {\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n    const [paises, setPaises] = useState([])\r\n    const [estados, setEstatos] = useState([])\r\n    const [cidades, setCidades] = useState([])\r\n\r\n    const buscarPaises = async () => {\r\n        axios.get(\"https://servicodados.ibge.gov.br/api/v1/paises\")\r\n            .then((r) => {\r\n                if (r.data.length > 0) {\r\n                    const salvar = async () => {\r\n                        r.data.map((v) => {\r\n                            const obj = {\r\n                                id: v.id[\"M49\"],\r\n                                sigla: v.id[\"ISO-3166-1-ALPHA-2\"],\r\n                                nome: v.nome.abreviado\r\n                            }\r\n                            PaisDao.Insert(obj)\r\n                        });\r\n                    }\r\n                    salvar()\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.log(`Erro ao buscar cidades: ${e.message}`)\r\n            })\r\n            .finally(() => {\r\n                console.log(\"Acabou Aqui\")\r\n            })\r\n    }\r\n\r\n    const buscarEstados = async () => {\r\n        axios.get(\"https://servicodados.ibge.gov.br/api/v1/localidades/estados\")\r\n            .then((r) => {\r\n                if (r.data.length > 0) {\r\n                    const salvar = async () => {\r\n                        r.data.map((v) => {\r\n                            const obj = {\r\n                                id: v.id,\r\n                                idRegiao: v.regiao.id,\r\n                                idPais: 76,\r\n                                sigla: v.sigla,\r\n                                nome: v.nome\r\n                            }\r\n                            EstadosDao.Insert(obj)\r\n                        });\r\n                    }\r\n                    salvar()\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.log(`Erro ao buscar cidades: ${e.message}`)\r\n            })\r\n            .finally(() => {\r\n\r\n            })\r\n    }\r\n\r\n    const buscarCidades = async () => {\r\n        axios.get(\"https://servicodados.ibge.gov.br/api/v1/localidades/municipios\")\r\n            .then((r) => {\r\n                if (r.data.length > 0) {\r\n                    const salvar = async () => {\r\n                        r.data.map((v) => {\r\n                            const obj = {\r\n                                id: v.id,\r\n                                idRegiao: v.microrregiao.mesorregiao[\"UF\"].regiao.id,\r\n                                idEstado: v.microrregiao.mesorregiao[\"UF\"].id,\r\n                                nome: v.nome\r\n                            }\r\n                            CidadesDao.Insert(obj)\r\n                        });\r\n                    }\r\n                    salvar()\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.log(`Erro ao buscar cidades: ${e.message}`)\r\n            })\r\n            .finally(() => {\r\n\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        setMessage(\"Buscando Paises\")\r\n        buscarPaises()\r\n        setMessage(\"Buscando Estados\")\r\n        buscarEstados()\r\n        // setMessage(\"Buscando Cidades\")\r\n        buscarCidades()\r\n        setTimeout(() => setLoading(false), 10000)\r\n    }, [setMessage, message])\r\n\r\n    return (\r\n        <View>\r\n            <ModalLoading\r\n                loading={loading}\r\n                onClose={setLoading}\r\n                message={message}\r\n            />\r\n        </View>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}