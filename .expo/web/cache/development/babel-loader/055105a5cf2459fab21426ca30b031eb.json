{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useFonts } from 'expo-font';\nimport React, { useEffect, useCallback, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { ThemeProvider } from 'styled-components';\nimport { useDefaultStyleSheet } from \"./components/style\";\nimport Sqlite from \"./db/Sqlite\";\nimport QuizzesScreen from \"./scenes/Quizes\";\nimport NavBarQuizzes from \"./scenes/Quizes/NavBar\";\nimport HomeScreen from \"./scenes/Home\";\nimport NomeUserScreen from \"./scenes/NomeUser/GetNomeUser\";\nimport JogarScreen from \"./scenes/Quizes/Jogar\";\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport Lobster from \"./assets/Lobster-Regular.ttf\";\nimport PermanentMarker from \"./assets/PermanentMarker-Regular.ttf\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport var AppContext = React.createContext({});\n\nfunction AppSplash() {\n  var style = useDefaultStyleSheet();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      listaCompleta = _useState2[0],\n      setListaCompleta = _useState2[1];\n\n  return _jsx(ThemeProvider, {\n    theme: style,\n    children: _jsx(AppContext.Provider, {\n      value: {\n        listaCompleta: listaCompleta,\n        setListaCompleta: setListaCompleta\n      },\n      children: _jsx(NavigationContainer, {\n        initialRouteName: \"NomeUser\",\n        children: _jsxs(Stack.Navigator, {\n          children: [_jsx(Stack.Screen, {\n            name: \"NomeUser\",\n            component: NomeUserScreen,\n            options: {\n              title: 'NomeUser',\n              headerShown: false\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"Quizzes\",\n            component: QuizzesScreen,\n            options: {\n              title: 'Quizzes',\n              headerShown: false,\n              header: function header() {\n                return _jsx(NavBarQuizzes, {});\n              }\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"Home\",\n            component: HomeScreen,\n            options: {\n              title: 'Home',\n              headerShown: false\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"Jogar\",\n            component: JogarScreen,\n            options: {\n              title: 'Jogar',\n              headerShown: false\n            }\n          })]\n        })\n      })\n    })\n  });\n}\n\nexport default function App() {\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      appIsReady = _useState4[0],\n      setAppIsReady = _useState4[1];\n\n  function initProject() {\n    return _regeneratorRuntime.async(function initProject$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Sqlite.runDDL().catch(function (err) {\n              return alert(err);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n            case 3:\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'Lobster-Regular': Lobster,\n                'PermanentMarker-Regular': PermanentMarker\n              }));\n\n            case 5:\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(Font.loadAsync([]));\n\n            case 7:\n              initProject();\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.warn(_context2.t0);\n\n            case 13:\n              _context2.prev = 13;\n              setAppIsReady(true);\n              return _context2.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 10, 13, 16]], Promise);\n    }\n\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!appIsReady) {\n              _context3.next = 3;\n              break;\n            }\n\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    onLayout: onLayoutRootView,\n    children: _jsx(AppSplash, {})\n  });\n}","map":{"version":3,"names":["NavigationContainer","createNativeStackNavigator","useFonts","React","useEffect","useCallback","useState","ThemeProvider","useDefaultStyleSheet","Sqlite","QuizzesScreen","NavBarQuizzes","HomeScreen","NomeUserScreen","JogarScreen","SplashScreen","Font","Lobster","PermanentMarker","Stack","AppContext","createContext","AppSplash","style","listaCompleta","setListaCompleta","title","headerShown","header","App","appIsReady","setAppIsReady","initProject","runDDL","catch","err","alert","prepare","preventAutoHideAsync","loadAsync","console","warn","onLayoutRootView","hideAsync","flex"],"sources":["D:/Projects/Aula/LocalityMap/App.js"],"sourcesContent":["import { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { useFonts } from 'expo-font';\r\nimport React, { useEffect, useCallback, useState } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport { useDefaultStyleSheet } from './components/style';\r\nimport Sqlite from './db/Sqlite';\r\nimport QuizzesScreen from './scenes/Quizes';\r\nimport NavBarQuizzes from './scenes/Quizes/NavBar';\r\nimport HomeScreen from './scenes/Home';\r\nimport NomeUserScreen from './scenes/NomeUser/GetNomeUser';\r\nimport JogarScreen from './scenes/Quizes/Jogar';\r\n// import SplashScreen from './scenes/Splash';\r\nimport * as SplashScreen from 'expo-splash-screen';\r\nimport * as Font from 'expo-font';\r\nimport Lobster from './assets/Lobster-Regular.ttf';\r\nimport PermanentMarker from './assets/PermanentMarker-Regular.ttf';\r\n\r\nconst Stack = createNativeStackNavigator()\r\nexport const AppContext = React.createContext({})\r\n\r\nfunction AppSplash() {\r\n  const style = useDefaultStyleSheet()\r\n\r\n  const [listaCompleta, setListaCompleta] = useState([])\r\n\r\n  return (\r\n    <ThemeProvider theme={style} >\r\n      <AppContext.Provider value={{ listaCompleta, setListaCompleta }}>\r\n        <NavigationContainer initialRouteName=\"NomeUser\">\r\n          <Stack.Navigator>\r\n            <Stack.Screen name=\"NomeUser\" component={NomeUserScreen} options={{ title: 'NomeUser', headerShown: false }} />\r\n            {/* <Stack.Screen name=\"Splash\" component={SplashScreen} options={{ title: 'Splash', headerShown: false }} /> */}\r\n            <Stack.Screen name=\"Quizzes\" component={QuizzesScreen} options={{ title: 'Quizzes', headerShown: false, header: () => <NavBarQuizzes /> }} />\r\n            <Stack.Screen name=\"Home\" component={HomeScreen} options={{ title: 'Home', headerShown: false }} />\r\n            <Stack.Screen name=\"Jogar\" component={JogarScreen} options={{ title: 'Jogar', headerShown: false }} />\r\n          </Stack.Navigator>\r\n        </NavigationContainer>\r\n      </AppContext.Provider>\r\n    </ThemeProvider >\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  const [appIsReady, setAppIsReady] = useState(false)\r\n\r\n  async function initProject() {\r\n    await Sqlite.runDDL().catch(err => alert(err))\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function prepare() {\r\n      try {\r\n        await SplashScreen.preventAutoHideAsync()\r\n        await Font.loadAsync({\r\n          'Lobster-Regular': Lobster,\r\n          'PermanentMarker-Regular': PermanentMarker\r\n        })\r\n        await Font.loadAsync([])\r\n        initProject()\r\n      } catch (e) {\r\n        console.warn(e)\r\n      } finally {\r\n        // Tell the application to render\r\n        setAppIsReady(true)\r\n      }\r\n    }\r\n\r\n    prepare()\r\n  }, [])\r\n\r\n  const onLayoutRootView = useCallback(async () => {\r\n    if (appIsReady) {\r\n      await SplashScreen.hideAsync()\r\n    }\r\n  }, [appIsReady])\r\n\r\n  if (!appIsReady) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <View style={{ flex: 1 }} onLayout={onLayoutRootView}>\r\n      <AppSplash />\r\n    </View>\r\n  )\r\n}"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,QAAxC,QAAwD,OAAxD;;;AAEA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,SAASC,oBAAT;AACA,OAAOC,MAAP;AACA,OAAOC,aAAP;AACA,OAAOC,aAAP;AACA,OAAOC,UAAP;AACA,OAAOC,cAAP;AACA,OAAOC,WAAP;AAEA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,OAAP;AACA,OAAOC,eAAP;;;AAEA,IAAMC,KAAK,GAAGlB,0BAA0B,EAAxC;AACA,OAAO,IAAMmB,UAAU,GAAGjB,KAAK,CAACkB,aAAN,CAAoB,EAApB,CAAnB;;AAEP,SAASC,SAAT,GAAqB;EACnB,IAAMC,KAAK,GAAGf,oBAAoB,EAAlC;;EAEA,gBAA0CF,QAAQ,CAAC,EAAD,CAAlD;EAAA;EAAA,IAAOkB,aAAP;EAAA,IAAsBC,gBAAtB;;EAEA,OACE,KAAC,aAAD;IAAe,KAAK,EAAEF,KAAtB;IAAA,UACE,KAAC,UAAD,CAAY,QAAZ;MAAqB,KAAK,EAAE;QAAEC,aAAa,EAAbA,aAAF;QAAiBC,gBAAgB,EAAhBA;MAAjB,CAA5B;MAAA,UACE,KAAC,mBAAD;QAAqB,gBAAgB,EAAC,UAAtC;QAAA,UACE,MAAC,KAAD,CAAO,SAAP;UAAA,WACE,KAAC,KAAD,CAAO,MAAP;YAAc,IAAI,EAAC,UAAnB;YAA8B,SAAS,EAAEZ,cAAzC;YAAyD,OAAO,EAAE;cAAEa,KAAK,EAAE,UAAT;cAAqBC,WAAW,EAAE;YAAlC;UAAlE,EADF,EAGE,KAAC,KAAD,CAAO,MAAP;YAAc,IAAI,EAAC,SAAnB;YAA6B,SAAS,EAAEjB,aAAxC;YAAuD,OAAO,EAAE;cAAEgB,KAAK,EAAE,SAAT;cAAoBC,WAAW,EAAE,KAAjC;cAAwCC,MAAM,EAAE;gBAAA,OAAM,KAAC,aAAD,KAAN;cAAA;YAAhD;UAAhE,EAHF,EAIE,KAAC,KAAD,CAAO,MAAP;YAAc,IAAI,EAAC,MAAnB;YAA0B,SAAS,EAAEhB,UAArC;YAAiD,OAAO,EAAE;cAAEc,KAAK,EAAE,MAAT;cAAiBC,WAAW,EAAE;YAA9B;UAA1D,EAJF,EAKE,KAAC,KAAD,CAAO,MAAP;YAAc,IAAI,EAAC,OAAnB;YAA2B,SAAS,EAAEb,WAAtC;YAAmD,OAAO,EAAE;cAAEY,KAAK,EAAE,OAAT;cAAkBC,WAAW,EAAE;YAA/B;UAA5D,EALF;QAAA;MADF;IADF;EADF,EADF;AAeD;;AAED,eAAe,SAASE,GAAT,GAAe;EAC5B,iBAAoCvB,QAAQ,CAAC,KAAD,CAA5C;EAAA;EAAA,IAAOwB,UAAP;EAAA,IAAmBC,aAAnB;;EAEA,SAAeC,WAAf;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCACQvB,MAAM,CAACwB,MAAP,GAAgBC,KAAhB,CAAsB,UAAAC,GAAG;cAAA,OAAIC,KAAK,CAACD,GAAD,CAAT;YAAA,CAAzB,CADR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;EAIA/B,SAAS,CAAC,YAAM;IACd,SAAeiC,OAAf;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAEUtB,YAAY,CAACuB,oBAAb,EAFV;;YAAA;cAAA;cAAA,iCAGUtB,IAAI,CAACuB,SAAL,CAAe;gBACnB,mBAAmBtB,OADA;gBAEnB,2BAA2BC;cAFR,CAAf,CAHV;;YAAA;cAAA;cAAA,iCAOUF,IAAI,CAACuB,SAAL,CAAe,EAAf,CAPV;;YAAA;cAQIP,WAAW;cARf;cAAA;;YAAA;cAAA;cAAA;cAUIQ,OAAO,CAACC,IAAR;;YAVJ;cAAA;cAaIV,aAAa,CAAC,IAAD,CAAb;cAbJ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAiBAM,OAAO;EACR,CAnBQ,EAmBN,EAnBM,CAAT;EAqBA,IAAMK,gBAAgB,GAAGrC,WAAW,CAAC;IAAA;MAAA;QAAA;UAAA;YAAA,KAC/ByB,UAD+B;cAAA;cAAA;YAAA;;YAAA;YAAA,iCAE3Bf,YAAY,CAAC4B,SAAb,EAF2B;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,EAIjC,CAACb,UAAD,CAJiC,CAApC;;EAMA,IAAI,CAACA,UAAL,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,OACE,KAAC,IAAD;IAAM,KAAK,EAAE;MAAEc,IAAI,EAAE;IAAR,CAAb;IAA0B,QAAQ,EAAEF,gBAApC;IAAA,UACE,KAAC,SAAD;EADF,EADF;AAKD"},"metadata":{},"sourceType":"module"}