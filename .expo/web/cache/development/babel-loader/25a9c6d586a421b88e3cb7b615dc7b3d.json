{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useNavigation } from '@react-navigation/native';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Fundo from \"../../assets/FundoTelaUser.png\";\nimport ModalLoading from \"../../components/Modals/ModalLoading\";\nimport BuscarDados from \"../../components/Ultils/BuscarDados\";\nimport CidadesDao from \"../../db/CidadeDao\";\nimport EstadosDao from \"../../db/EstadoDao\";\nimport PaisDao from \"../../db/PaisDao\";\nimport QuizzesDao from \"../../db/QuizzesDao\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Quizzes() {\n  var navigation = useNavigation();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      refreshing = _useState6[0],\n      setRefreshing = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      listQuizzes = _useState8[0],\n      setListQuizzes = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      modalError = _useState10[0],\n      setModalError = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      buscarNaApi = _useState12[0],\n      setBuscarNaApi = _useState12[1];\n\n  var Item = function Item(_ref) {\n    var item = _ref.item;\n    return _jsxs(TouchableOpacity, {\n      style: {\n        padding: 20,\n        backgroundColor: '#DDDDDD33',\n        borderRadius: 10\n      },\n      onPress: function onPress() {\n        return setBuscarNaApi(true);\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 20,\n          color: '#FFFFFFCC'\n        },\n        children: item.nome || '---'\n      }), _jsx(Text, {\n        children: item.descricao || '---'\n      })]\n    });\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsx(Item, {\n      item: item\n    });\n  };\n\n  var buscarPaises = function _callee3() {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(\"https://servicodados.ibge.gov.br/api/v1/paises\").then(function (r) {\n              if (r.data.length > 0) {\n                var list = Array();\n\n                var salvar = function _callee2() {\n                  return _regeneratorRuntime.async(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          r.data.forEach(function _callee(v) {\n                            var obj;\n                            return _regeneratorRuntime.async(function _callee$(_context) {\n                              while (1) {\n                                switch (_context.prev = _context.next) {\n                                  case 0:\n                                    obj = {\n                                      id: v.id[\"M49\"],\n                                      sigla: v.id[\"ISO-3166-1-ALPHA-2\"],\n                                      nome: v.nome.abreviado\n                                    };\n                                    list.push(obj);\n\n                                  case 2:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }\n                            }, null, null, null, Promise);\n                          });\n                          PaisDao.Insert(list[0]);\n\n                        case 2:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                salvar();\n              }\n            }).catch(function (e) {\n              console.log(\"Erro ao buscar cidades: \" + e.message);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var buscarEstados = function _callee5() {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            axios.get(\"https://servicodados.ibge.gov.br/api/v1/localidades/estados\").then(function (r) {\n              if (r.data.length > 0) {\n                var salvar = function _callee4() {\n                  return _regeneratorRuntime.async(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          r.data.map(function (v) {\n                            var obj = {\n                              id: v.id,\n                              idRegiao: v.regiao.id,\n                              idPais: 76,\n                              sigla: v.sigla,\n                              nome: v.nome\n                            };\n                            EstadosDao.Insert(obj);\n                          });\n\n                        case 1:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                salvar();\n              }\n            }).catch(function (e) {\n              console.log(\"Erro ao buscar cidades: \" + e.message);\n            });\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var buscarCidades = function _callee7() {\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            axios.get(\"https://servicodados.ibge.gov.br/api/v1/localidades/municipios\").then(function (r) {\n              if (r.data.length > 0) {\n                var salvar = function _callee6() {\n                  return _regeneratorRuntime.async(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          r.data.map(function (v) {\n                            var obj = {\n                              id: v.id,\n                              idRegiao: v.microrregiao.mesorregiao[\"UF\"].regiao.id,\n                              idEstado: v.microrregiao.mesorregiao[\"UF\"].id,\n                              nome: v.nome\n                            };\n                            CidadesDao.Insert(obj);\n                          });\n\n                        case 1:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                salvar();\n              }\n            }).catch(function (e) {\n              console.log(\"Erro ao buscar cidades: \" + e.message);\n            });\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(useCallback(function () {\n    setLoading(true);\n    buscarPaises();\n    setLoading(false);\n  }, [setLoading, setMessage, buscarPaises]));\n  useEffect(function () {\n    PaisDao.GetPais().then(function (e) {\n      console.log(e.length + ' nada');\n    });\n  }, []);\n  useEffect(function () {\n    var inseriu = 'false';\n\n    var inserir = function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@insertQuizz'));\n\n            case 2:\n              inseriu = _context8.sent;\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    inserir();\n\n    if (!inseriu || inseriu != 'true') {\n      var get = function _callee9() {\n        return _regeneratorRuntime.async(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return _regeneratorRuntime.awrap(AsyncStorage.setItem('@insertQuizz', 'true'));\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      get();\n\n      var insertQuizzes = function _callee10() {\n        return _regeneratorRuntime.async(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _regeneratorRuntime.awrap(QuizzesDao.Insert({\n                  id: 0,\n                  numQuizz: 1,\n                  nome: \"Quizz Cidades\",\n                  descricao: \"Neste quizz você precisa descobrir quais são as cidades pertencentes ao estado escolhido.\"\n                }).catch(function (e) {\n                  return alert(e);\n                }));\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      insertQuizzes();\n    }\n\n    var getQuizzes = function _callee11() {\n      return _regeneratorRuntime.async(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _regeneratorRuntime.awrap(QuizzesDao.GetQuizzes().then(function (e) {\n                return setListQuizzes(e);\n              }).catch(function (e) {\n                return alert(e);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getQuizzes();\n  }, []);\n  return _jsxs(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: [_jsxs(ImageBackground, {\n      source: Fundo,\n      style: {\n        flex: 1,\n        padding: 10\n      },\n      children: [_jsx(Text, {\n        style: styles.titleTest,\n        children: \"QUIZZES\"\n      }), _jsx(FlatList, {\n        refreshing: refreshing,\n        data: listQuizzes,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(item, index) {\n          return \"\" + index;\n        },\n        ListEmptyComponent: function ListEmptyComponent() {\n          return _jsx(Text, {\n            style: {\n              color: 'white'\n            },\n            children: 'Não há Quizzes para exibir'\n          });\n        },\n        ListFooterComponent: function ListFooterComponent() {\n          return refreshing && _jsx(View, {\n            children: _jsx(Text, {\n              style: {\n                color: 'white'\n              },\n              children: \"Carregando Quizzes...\"\n            })\n          });\n        }\n      })]\n    }), _jsx(ModalLoading, {\n      loading: loading,\n      onClose: setLoading,\n      message: message\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20\n  },\n  titleTest: {\n    marginTop: 30,\n    fontSize: 30,\n    fontWeight: 'bold',\n    color: 'white'\n  },\n  input: {\n    backgroundColor: 'transparent',\n    color: 'black',\n    height: 35,\n    paddingHorizontal: 20,\n    borderColor: 10,\n    borderWidth: 0.7,\n    borderRadius: 50\n  },\n  marginView: {\n    paddingHorizontal: 10,\n    marginVertical: 20\n  },\n  viewButton: {\n    marginTop: 10\n  },\n  button: {\n    borderRadius: 20,\n    color: 'white',\n    backgroundColor: '#2196f3',\n    padding: 10,\n    width: '100%',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["D:/Projects/Aula/LocalityMap/scenes/Quizes/index.js"],"names":["AsyncStorage","useNavigation","axios","React","useCallback","useEffect","useState","Fundo","ModalLoading","BuscarDados","CidadesDao","EstadosDao","PaisDao","QuizzesDao","Quizzes","navigation","loading","setLoading","message","setMessage","refreshing","setRefreshing","listQuizzes","setListQuizzes","modalError","setModalError","buscarNaApi","setBuscarNaApi","Item","item","padding","backgroundColor","borderRadius","fontSize","color","nome","descricao","renderItem","buscarPaises","get","then","r","data","length","list","Array","salvar","forEach","v","obj","id","sigla","abreviado","push","Insert","catch","e","console","log","buscarEstados","map","idRegiao","regiao","idPais","buscarCidades","microrregiao","mesorregiao","idEstado","GetPais","inseriu","inserir","getItem","setItem","insertQuizzes","numQuizz","alert","getQuizzes","GetQuizzes","flex","styles","titleTest","index","StyleSheet","create","container","justifyContent","paddingHorizontal","marginTop","fontWeight","input","height","borderColor","borderWidth","marginView","marginVertical","viewButton","button","width","alignItems"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { FlatList, SafeAreaView, StyleSheet, Text, View, ImageBackground, TouchableOpacity } from 'react-native';\r\n\r\nimport Fundo from '../../assets/FundoTelaUser.png';\r\nimport ModalLoading from '../../components/Modals/ModalLoading';\r\nimport BuscarDados from '../../components/Ultils/BuscarDados';\r\nimport CidadesDao from '../../db/CidadeDao';\r\nimport EstadosDao from '../../db/EstadoDao';\r\nimport PaisDao from '../../db/PaisDao';\r\nimport QuizzesDao from '../../db/QuizzesDao'\r\n\r\nexport default function Quizzes() {\r\n    const navigation = useNavigation()\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n    const [refreshing, setRefreshing] = useState(false)\r\n    const [listQuizzes, setListQuizzes] = useState([])\r\n    const [modalError, setModalError] = useState(false)\r\n    const [buscarNaApi, setBuscarNaApi] = useState(false)\r\n\r\n    const Item = ({ item }) => {\r\n        return (\r\n            <TouchableOpacity style={{ padding: 20, backgroundColor: '#DDDDDD33', borderRadius: 10 }} onPress={() => setBuscarNaApi(true)}>\r\n                <Text style={{ fontSize: 20, color: '#FFFFFFCC' }}>{item.nome || '---'}</Text>\r\n                <Text>{item.descricao || '---'}</Text>\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n    const renderItem = ({ item }) => (\r\n        <Item item={item} />\r\n    )\r\n\r\n    const buscarPaises = async () => {\r\n        await axios.get(\"https://servicodados.ibge.gov.br/api/v1/paises\")\r\n            .then((r) => {\r\n                if (r.data.length > 0) {\r\n                    let list = Array()\r\n                    const salvar = async () => {\r\n                        r.data.forEach( async (v) => {\r\n                            const obj = {\r\n                                id: v.id[\"M49\"],\r\n                                sigla: v.id[\"ISO-3166-1-ALPHA-2\"],\r\n                                nome: v.nome.abreviado\r\n                            }\r\n                            list.push(obj)\r\n                            // await PaisDao.Insert(obj)\r\n                        });\r\n                        PaisDao.Insert(list[0])\r\n                    }\r\n                    salvar()\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.log(`Erro ao buscar cidades: ${e.message}`)\r\n            })\r\n    }\r\n\r\n    const buscarEstados = async () => {\r\n        axios.get(\"https://servicodados.ibge.gov.br/api/v1/localidades/estados\")\r\n            .then((r) => {\r\n                if (r.data.length > 0) {\r\n                    const salvar = async () => {\r\n                        r.data.map((v) => {\r\n                            const obj = {\r\n                                id: v.id,\r\n                                idRegiao: v.regiao.id,\r\n                                idPais: 76,\r\n                                sigla: v.sigla,\r\n                                nome: v.nome\r\n                            }\r\n                            EstadosDao.Insert(obj)\r\n                        });\r\n                    }\r\n                    salvar()\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.log(`Erro ao buscar cidades: ${e.message}`)\r\n            })\r\n    }\r\n\r\n    const buscarCidades = async () => {\r\n        axios.get(\"https://servicodados.ibge.gov.br/api/v1/localidades/municipios\")\r\n            .then((r) => {\r\n                if (r.data.length > 0) {\r\n                    const salvar = async () => {\r\n                        r.data.map((v) => {\r\n                            const obj = {\r\n                                id: v.id,\r\n                                idRegiao: v.microrregiao.mesorregiao[\"UF\"].regiao.id,\r\n                                idEstado: v.microrregiao.mesorregiao[\"UF\"].id,\r\n                                nome: v.nome\r\n                            }\r\n                            CidadesDao.Insert(obj)\r\n                        });\r\n                    }\r\n                    salvar()\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.log(`Erro ao buscar cidades: ${e.message}`)\r\n            })\r\n    }\r\n\r\n    useEffect(useCallback(() => {\r\n        setLoading(true)\r\n        buscarPaises()\r\n        setLoading(false)\r\n    }, [setLoading, setMessage, buscarPaises]))\r\n\r\n    useEffect(() => {\r\n        PaisDao.GetPais().then((e) => {\r\n            console.log(e.length + ' nada')\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let inseriu = 'false'\r\n        const inserir = async () => {\r\n            inseriu = await AsyncStorage.getItem('@insertQuizz')\r\n        }\r\n        inserir()\r\n\r\n        if (!inseriu || inseriu != 'true') {\r\n            const get = async () => {\r\n                await AsyncStorage.setItem('@insertQuizz', 'true')\r\n            }\r\n            get()\r\n\r\n            const insertQuizzes = async () => {\r\n                await QuizzesDao.Insert({\r\n                    id: 0,\r\n                    numQuizz: 1,\r\n                    nome: \"Quizz Cidades\",\r\n                    descricao: \"Neste quizz você precisa descobrir quais são as cidades pertencentes ao estado escolhido.\"\r\n                })\r\n                    .catch((e) => alert(e))\r\n            }\r\n            insertQuizzes()\r\n        }\r\n\r\n        const getQuizzes = async () => {\r\n            await QuizzesDao.GetQuizzes()\r\n                .then((e) => setListQuizzes(e))\r\n                .catch((e) => alert(e))\r\n        }\r\n        getQuizzes()\r\n    }, [])\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n            <ImageBackground source={Fundo} style={{ flex: 1, padding: 10 }}>\r\n                <Text style={styles.titleTest}>QUIZZES</Text>\r\n                <FlatList\r\n                    refreshing={refreshing}\r\n                    data={listQuizzes}\r\n                    renderItem={renderItem}\r\n                    keyExtractor={(item, index) => `${index}`}\r\n                    ListEmptyComponent={() => <Text style={{ color: 'white' }}>{'Não há Quizzes para exibir'}</Text>}\r\n                    ListFooterComponent={() => refreshing && (\r\n                        <View>\r\n                            <Text style={{ color: 'white' }}>Carregando Quizzes...</Text>\r\n                        </View>\r\n                    )}\r\n                />\r\n            </ImageBackground>\r\n            <ModalLoading\r\n                loading={loading}\r\n                onClose={setLoading}\r\n                message={message}\r\n            />\r\n        </SafeAreaView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        paddingHorizontal: 20\r\n    },\r\n    titleTest: {\r\n        marginTop: 30,\r\n        fontSize: 30,\r\n        fontWeight: 'bold',\r\n        color: 'white',\r\n    },\r\n    input: {\r\n        backgroundColor: 'transparent',\r\n        color: 'black',\r\n        height: 35,\r\n        paddingHorizontal: 20,\r\n        borderColor: 10,\r\n        borderWidth: 0.7,\r\n        borderRadius: 50\r\n    },\r\n    marginView: {\r\n        paddingHorizontal: 10,\r\n        marginVertical: 20\r\n    },\r\n    viewButton: {\r\n        marginTop: 10\r\n    },\r\n    button: {\r\n        borderRadius: 20,\r\n        color: 'white',\r\n        backgroundColor: '#2196f3',\r\n        padding: 10,\r\n        width: '100%',\r\n        alignItems: 'center'\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}