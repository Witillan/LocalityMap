{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Sqlite from \"./Sqlite\";\n\nvar PaisDao = function () {\n  function PaisDao() {\n    _classCallCheck(this, PaisDao);\n  }\n\n  _createClass(PaisDao, null, [{\n    key: \"Insert\",\n    value: function Insert(values) {\n      return new Promise(function (resolve, reject) {\n        var db = Sqlite.getDb();\n        db.transaction(function (tx) {\n          values.forEach(function (item) {\n            tx.executeSql('insert or replace into Pais values (?,?,?)', [item.id.M49, item.id[\"ISO-3166-1-ALPHA-2\"], item.nome.abreviado]);\n          });\n        }, reject, resolve);\n      });\n    }\n  }, {\n    key: \"GetPais\",\n    value: function GetPais() {\n      return new Promise(function (resolve, reject) {\n        var db = Sqlite.getDb();\n        var query = 'select * from Pais';\n        db.transaction(function (tx) {\n          tx.executeSql(query, [], function (_, _ref) {\n            var rows = _ref.rows;\n            return resolve(rows);\n          }, function (_, error) {\n            return reject(error);\n          });\n        });\n      });\n    }\n  }]);\n\n  return PaisDao;\n}();\n\nexport { PaisDao as default };","map":{"version":3,"names":["Sqlite","PaisDao","values","Promise","resolve","reject","db","getDb","transaction","tx","forEach","item","executeSql","id","M49","nome","abreviado","query","_","rows","error"],"sources":["D:/Projects/Aula/LocalityMap/db/PaisDao.js"],"sourcesContent":["import { Platform } from 'react-native'\r\nimport Sqlite from './Sqlite'\r\n\r\nexport default class PaisDao {\r\n    static Insert(values) {\r\n        return new Promise((resolve, reject) => {\r\n            const db = Sqlite.getDb()\r\n\r\n            db.transaction(tx => {\r\n                values.forEach(item => {\r\n                    tx.executeSql('insert or replace into Pais values (?,?,?)', [item.id.M49, item.id[\"ISO-3166-1-ALPHA-2\"], item.nome.abreviado])\r\n                })\r\n            }, reject, resolve)\r\n        })\r\n    }\r\n\r\n    static GetPais() {\r\n        return new Promise((resolve, reject) => {\r\n            const db = Sqlite.getDb()\r\n\r\n            const query = 'select * from Pais'\r\n\r\n            db.transaction(tx => {\r\n                tx.executeSql(query, [], (_, { rows }) => resolve(rows), (_, error) => { return reject(error) })\r\n            })\r\n        })\r\n    }\r\n}"],"mappings":";;;AACA,OAAOA,MAAP;;IAEqBC,O;;;;;;;WACjB,gBAAcC,MAAd,EAAsB;MAClB,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACpC,IAAMC,EAAE,GAAGN,MAAM,CAACO,KAAP,EAAX;QAEAD,EAAE,CAACE,WAAH,CAAe,UAAAC,EAAE,EAAI;UACjBP,MAAM,CAACQ,OAAP,CAAe,UAAAC,IAAI,EAAI;YACnBF,EAAE,CAACG,UAAH,CAAc,4CAAd,EAA4D,CAACD,IAAI,CAACE,EAAL,CAAQC,GAAT,EAAcH,IAAI,CAACE,EAAL,CAAQ,oBAAR,CAAd,EAA6CF,IAAI,CAACI,IAAL,CAAUC,SAAvD,CAA5D;UACH,CAFD;QAGH,CAJD,EAIGX,MAJH,EAIWD,OAJX;MAKH,CARM,CAAP;IASH;;;WAED,mBAAiB;MACb,OAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACpC,IAAMC,EAAE,GAAGN,MAAM,CAACO,KAAP,EAAX;QAEA,IAAMU,KAAK,GAAG,oBAAd;QAEAX,EAAE,CAACE,WAAH,CAAe,UAAAC,EAAE,EAAI;UACjBA,EAAE,CAACG,UAAH,CAAcK,KAAd,EAAqB,EAArB,EAAyB,UAACC,CAAD;YAAA,IAAMC,IAAN,QAAMA,IAAN;YAAA,OAAiBf,OAAO,CAACe,IAAD,CAAxB;UAAA,CAAzB,EAAyD,UAACD,CAAD,EAAIE,KAAJ,EAAc;YAAE,OAAOf,MAAM,CAACe,KAAD,CAAb;UAAsB,CAA/F;QACH,CAFD;MAGH,CARM,CAAP;IASH;;;;;;SAvBgBnB,O"},"metadata":{},"sourceType":"module"}