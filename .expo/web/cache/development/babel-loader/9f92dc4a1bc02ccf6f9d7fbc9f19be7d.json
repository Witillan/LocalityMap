{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Sqlite from \"./Sqlite\";\n\nvar QuizzesDao = function () {\n  function QuizzesDao() {\n    _classCallCheck(this, QuizzesDao);\n  }\n\n  _createClass(QuizzesDao, null, [{\n    key: \"Insert\",\n    value: function Insert(value) {\n      return new Promise(function (resolve, reject) {\n        debugger;\n        var db = Sqlite.getDb();\n        db.transaction(function (tx) {\n          var parameters = [value.id, value.numQuizz, value.nome, value.descricao];\n          tx.executeSql(\"insert or replace into Quizz values (\" + parameters.map(function () {\n            return '?';\n          }).join(',') + \")\", parameters);\n        }, reject, resolve);\n      });\n    }\n  }, {\n    key: \"GetQuizzes\",\n    value: function GetQuizzes() {\n      return new Promise(function (resolve, reject) {\n        var db = Sqlite.getDb();\n        var query = 'select * from Quizz';\n        db.transaction(function (tx) {\n          tx.executeSql(query, [], function (_, _ref) {\n            var rows = _ref.rows;\n            return resolve(function () {\n              if (Platform.OS === 'android') {\n                console.log('android');\n                console.log(rows);\n                return rows._arrow;\n              } else {\n                console.log('web');\n                return rows;\n              }\n            });\n          }, function (_, error) {\n            return reject(error);\n          });\n        });\n      });\n    }\n  }]);\n\n  return QuizzesDao;\n}();\n\nexport { QuizzesDao as default };","map":{"version":3,"sources":["D:/Projects/Aula/LocalityMap/db/QuizzesDao.js"],"names":["Sqlite","QuizzesDao","value","Promise","resolve","reject","db","getDb","transaction","tx","parameters","id","numQuizz","nome","descricao","executeSql","map","join","query","_","rows","Platform","OS","console","log","_arrow","error"],"mappings":";;;AACA,OAAOA,MAAP;;IAEqBC,U;;;;;;;WAEjB,gBAAcC,KAAd,EAAqB;AACjB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,YAAMC,EAAE,GAAGN,MAAM,CAACO,KAAP,EAAX;AAEAD,QAAAA,EAAE,CAACE,WAAH,CAAe,UAAAC,EAAE,EAAI;AACjB,cAAMC,UAAU,GAAG,CACfR,KAAK,CAACS,EADS,EAEfT,KAAK,CAACU,QAFS,EAGfV,KAAK,CAACW,IAHS,EAIfX,KAAK,CAACY,SAJS,CAAnB;AAMAL,UAAAA,EAAE,CAACM,UAAH,2CAAsDL,UAAU,CAACM,GAAX,CAAe;AAAA,mBAAM,GAAN;AAAA,WAAf,EAA0BC,IAA1B,CAA+B,GAA/B,CAAtD,QAA8FP,UAA9F;AACH,SARD,EAQGL,MARH,EAQWD,OARX;AASH,OAbM,CAAP;AAcH;;;WAED,sBAAoB;AAChB,aAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAMC,EAAE,GAAGN,MAAM,CAACO,KAAP,EAAX;AAEA,YAAMW,KAAK,GAAG,qBAAd;AAEAZ,QAAAA,EAAE,CAACE,WAAH,CAAe,UAAAC,EAAE,EAAI;AACjBA,UAAAA,EAAE,CAACM,UAAH,CAAcG,KAAd,EAAqB,EAArB,EAAyB,UAACC,CAAD;AAAA,gBAAMC,IAAN,QAAMA,IAAN;AAAA,mBAAiBhB,OAAO,CAAC,YAAM;AACpD,kBAAIiB,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC3BC,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,uBAAOA,IAAI,CAACK,MAAZ;AACH,eAJD,MAIO;AACHF,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,uBAAOJ,IAAP;AACH;AACJ,aATgD,CAAxB;AAAA,WAAzB,EASI,UAACD,CAAD,EAAIO,KAAJ,EAAc;AAAE,mBAAOrB,MAAM,CAACqB,KAAD,CAAb;AAAsB,WAT1C;AAUH,SAXD;AAYH,OAjBM,CAAP;AAkBH;;;;;;SAtCgBzB,U","sourcesContent":["import { Platform } from 'react-native'\r\nimport Sqlite from './Sqlite'\r\n\r\nexport default class QuizzesDao {\r\n\r\n    static Insert(value) {\r\n        return new Promise((resolve, reject) => {\r\n            debugger\r\n            const db = Sqlite.getDb()\r\n\r\n            db.transaction(tx => {\r\n                const parameters = [\r\n                    value.id,\r\n                    value.numQuizz,\r\n                    value.nome,\r\n                    value.descricao\r\n                ]\r\n                tx.executeSql(`insert or replace into Quizz values (${parameters.map(() => '?').join(',')})`, parameters)\r\n            }, reject, resolve)\r\n        })\r\n    }\r\n\r\n    static GetQuizzes() {\r\n        return new Promise((resolve, reject) => {\r\n            const db = Sqlite.getDb()\r\n\r\n            const query = 'select * from Quizz'\r\n\r\n            db.transaction(tx => {\r\n                tx.executeSql(query, [], (_, { rows }) => resolve(() => {\r\n                    if (Platform.OS === 'android') {\r\n                        console.log('android')\r\n                        console.log(rows)\r\n                        return rows._arrow\r\n                    } else {\r\n                        console.log('web')\r\n                        return rows\r\n                    }\r\n                }), (_, error) => { return reject(error) })\r\n            })\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}