{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Sqlite from \"./Sqlite\";\n\nvar CidadesDao = function () {\n  function CidadesDao() {\n    _classCallCheck(this, CidadesDao);\n  }\n\n  _createClass(CidadesDao, null, [{\n    key: \"Insert\",\n    value: function Insert(values) {\n      return new Promise(function (resolve, reject) {\n        var db = Sqlite.getDb();\n        db.transaction(function (tx) {\n          values.forEach(function (item) {\n            tx.executeSql('insert or replace into Cidades values (?,?,?,?)', [item.id, item.microrregiao.mesorregiao.UF.id, item.microrregiao.mesorregiao.UF.regiao.id, item.nome]);\n          });\n        }, reject, resolve);\n      });\n    }\n  }, {\n    key: \"GetCidades\",\n    value: function GetCidades() {\n      return new Promise(function (resolve, reject) {\n        var db = Sqlite.getDb();\n        var query = 'select * from Cidades';\n        db.transaction(function (tx) {\n          tx.executeSql(query, [], function (_, _ref) {\n            var rows = _ref.rows;\n            return resolve(rows);\n          }, function (_, error) {\n            return reject(error);\n          });\n        });\n      });\n    }\n  }]);\n\n  return CidadesDao;\n}();\n\nexport { CidadesDao as default };","map":{"version":3,"names":["Sqlite","CidadesDao","values","Promise","resolve","reject","db","getDb","transaction","tx","forEach","item","executeSql","id","microrregiao","mesorregiao","UF","regiao","nome","query","_","rows","error"],"sources":["D:/Projects/Aula/LocalityMap/db/CidadeDao.js"],"sourcesContent":["import { Platform } from 'react-native'\r\nimport Sqlite from './Sqlite'\r\n\r\nexport default class CidadesDao {\r\n    static Insert (values) {\r\n        return new Promise((resolve, reject) => {\r\n          const db = Sqlite.getDb()\r\n    \r\n          db.transaction(tx => {\r\n            values.forEach(item => {\r\n              tx.executeSql('insert or replace into Cidades values (?,?,?,?)', [item.id, item.microrregiao.mesorregiao.UF.id, item.microrregiao.mesorregiao.UF.regiao.id, item.nome])\r\n            })\r\n          }, reject, resolve)\r\n        })\r\n      }\r\n\r\n    static GetCidades() {\r\n        return new Promise((resolve, reject) => {\r\n            const db = Sqlite.getDb()\r\n\r\n            const query = 'select * from Cidades'\r\n\r\n            db.transaction(tx => {\r\n                tx.executeSql(query, [], (_, { rows }) => resolve(rows), (_, error) => { return reject(error) })\r\n            })\r\n        })\r\n    }\r\n}"],"mappings":";;;AACA,OAAOA,MAAP;;IAEqBC,U;;;;;;;WACjB,gBAAeC,MAAf,EAAuB;MACnB,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACtC,IAAMC,EAAE,GAAGN,MAAM,CAACO,KAAP,EAAX;QAEAD,EAAE,CAACE,WAAH,CAAe,UAAAC,EAAE,EAAI;UACnBP,MAAM,CAACQ,OAAP,CAAe,UAAAC,IAAI,EAAI;YACrBF,EAAE,CAACG,UAAH,CAAc,iDAAd,EAAiE,CAACD,IAAI,CAACE,EAAN,EAAUF,IAAI,CAACG,YAAL,CAAkBC,WAAlB,CAA8BC,EAA9B,CAAiCH,EAA3C,EAA+CF,IAAI,CAACG,YAAL,CAAkBC,WAAlB,CAA8BC,EAA9B,CAAiCC,MAAjC,CAAwCJ,EAAvF,EAA2FF,IAAI,CAACO,IAAhG,CAAjE;UACD,CAFD;QAGD,CAJD,EAIGb,MAJH,EAIWD,OAJX;MAKD,CARM,CAAP;IASD;;;WAEH,sBAAoB;MAChB,OAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACpC,IAAMC,EAAE,GAAGN,MAAM,CAACO,KAAP,EAAX;QAEA,IAAMY,KAAK,GAAG,uBAAd;QAEAb,EAAE,CAACE,WAAH,CAAe,UAAAC,EAAE,EAAI;UACjBA,EAAE,CAACG,UAAH,CAAcO,KAAd,EAAqB,EAArB,EAAyB,UAACC,CAAD;YAAA,IAAMC,IAAN,QAAMA,IAAN;YAAA,OAAiBjB,OAAO,CAACiB,IAAD,CAAxB;UAAA,CAAzB,EAAyD,UAACD,CAAD,EAAIE,KAAJ,EAAc;YAAE,OAAOjB,MAAM,CAACiB,KAAD,CAAb;UAAsB,CAA/F;QACH,CAFD;MAGH,CARM,CAAP;IASH;;;;;;SAvBgBrB,U"},"metadata":{},"sourceType":"module"}