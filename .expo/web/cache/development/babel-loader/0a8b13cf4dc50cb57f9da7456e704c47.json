{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useFonts } from 'expo-font';\nimport React, { useEffect, useCallback, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { ThemeProvider } from 'styled-components';\nimport { useDefaultStyleSheet } from \"./components/style\";\nimport Sqlite from \"./db/Sqlite\";\nimport QuizzesScreen from \"./scenes/Quizes\";\nimport NavBarQuizzes from \"./scenes/Quizes/NavBar\";\nimport HomeScreen from \"./scenes/Home\";\nimport NomeUserScreen from \"./scenes/NomeUser/GetNomeUser\";\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport Lobster from \"./assets/Lobster-Regular.ttf\";\nimport PermanentMarker from \"./assets/PermanentMarker-Regular.ttf\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\n\nfunction AppSplash() {\n  var style = useDefaultStyleSheet();\n  return _jsx(ThemeProvider, {\n    theme: style,\n    children: _jsx(NavigationContainer, {\n      initialRouteName: \"NomeUser\",\n      children: _jsxs(Stack.Navigator, {\n        children: [_jsx(Stack.Screen, {\n          name: \"NomeUser\",\n          component: NomeUserScreen,\n          options: {\n            title: 'NomeUser',\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"Quizzes\",\n          component: QuizzesScreen,\n          options: {\n            title: 'Quiz',\n            headerShown: false,\n            header: function header() {\n              return _jsx(NavBarQuizzes, {});\n            }\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"Home\",\n          component: HomeScreen,\n          options: {\n            title: 'Home',\n            headerShown: false\n          }\n        })]\n      })\n    })\n  });\n}\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      appIsReady = _useState2[0],\n      setAppIsReady = _useState2[1];\n\n  function initProject() {\n    return _regeneratorRuntime.async(function initProject$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Sqlite.runDDL().catch(function (err) {\n              return alert(err);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n            case 3:\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'Lobster-Regular': Lobster,\n                'PermanentMarker-Regular': PermanentMarker\n              }));\n\n            case 5:\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(Font.loadAsync([]));\n\n            case 7:\n              initProject();\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.warn(_context2.t0);\n\n            case 13:\n              _context2.prev = 13;\n              setAppIsReady(true);\n              return _context2.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 10, 13, 16]], Promise);\n    }\n\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!appIsReady) {\n              _context3.next = 3;\n              break;\n            }\n\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    onLayout: onLayoutRootView,\n    children: _jsx(AppSplash, {})\n  });\n}","map":{"version":3,"sources":["D:/Projects/Aula/LocalityMap/App.js"],"names":["NavigationContainer","createNativeStackNavigator","useFonts","React","useEffect","useCallback","useState","ThemeProvider","useDefaultStyleSheet","Sqlite","QuizzesScreen","NavBarQuizzes","HomeScreen","NomeUserScreen","SplashScreen","Font","Lobster","PermanentMarker","Stack","AppSplash","style","title","headerShown","header","App","appIsReady","setAppIsReady","initProject","runDDL","catch","err","alert","prepare","preventAutoHideAsync","loadAsync","console","warn","onLayoutRootView","hideAsync","flex"],"mappings":"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","sourcesContent":["import { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useFonts } from 'expo-font';\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { View, Text } from 'react-native';\nimport { ThemeProvider } from 'styled-components';\n\nimport { useDefaultStyleSheet } from './components/style';\nimport Sqlite from './db/Sqlite';\nimport QuizzesScreen from './scenes/Quizes';\nimport NavBarQuizzes from './scenes/Quizes/NavBar';\nimport HomeScreen from './scenes/Home';\nimport NomeUserScreen from './scenes/NomeUser/GetNomeUser';\n// import SplashScreen from './scenes/Splash';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport Lobster from './assets/Lobster-Regular.ttf';\nimport PermanentMarker from './assets/PermanentMarker-Regular.ttf';\n\nconst Stack = createNativeStackNavigator()\n\nfunction AppSplash() {\n  const style = useDefaultStyleSheet()\n  return (\n    <ThemeProvider theme={style} >\n      <NavigationContainer initialRouteName=\"NomeUser\">\n        <Stack.Navigator>\n          <Stack.Screen name=\"NomeUser\" component={NomeUserScreen} options={{ title: 'NomeUser', headerShown: false }} />\n          {/* <Stack.Screen name=\"Splash\" component={SplashScreen} options={{ title: 'Splash', headerShown: false }} /> */}\n          <Stack.Screen name=\"Quizzes\" component={QuizzesScreen} options={{ title: 'Quiz', headerShown: false, header: () => <NavBarQuizzes /> }} />\n          <Stack.Screen name=\"Home\" component={HomeScreen} options={{ title: 'Home', headerShown: false }} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </ThemeProvider >\n  )\n}\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false)\n\n  async function initProject() {\n    await Sqlite.runDDL().catch(err => alert(err))\n  }\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        await SplashScreen.preventAutoHideAsync()\n        await Font.loadAsync({\n          'Lobster-Regular': Lobster,\n          'PermanentMarker-Regular': PermanentMarker\n        })\n        await Font.loadAsync([])\n        initProject()\n      } catch (e) {\n        console.warn(e)\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true)\n      }\n    }\n\n    prepare()\n  }, [])\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      await SplashScreen.hideAsync()\n    }\n  }, [appIsReady])\n\n  if (!appIsReady) {\n    return null\n  }\n\n  return (\n    <View style={{ flex: 1 }} onLayout={onLayoutRootView}>\n      <AppSplash />\n    </View>\n  )\n}"]},"metadata":{},"sourceType":"module"}