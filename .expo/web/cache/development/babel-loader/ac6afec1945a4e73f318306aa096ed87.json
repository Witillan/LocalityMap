{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as SQLite from 'expo-sqlite';\n\nvar Sqlite = function () {\n  function Sqlite() {\n    _classCallCheck(this, Sqlite);\n  }\n\n  _createClass(Sqlite, null, [{\n    key: \"getDb\",\n    value: function getDb() {\n      return SQLite.openDatabase('LocalityMap');\n    }\n  }, {\n    key: \"runDDL\",\n    value: function runDDL() {\n      var db = this.getDb();\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql(\"create table if not exists Pais (\\n        id int primary key not null,\\n        idPais int,\\n        idEsta int,\\n        idRegiao int,\\n        nome text,\\n        foreign key () references HistoricoCompra (id) on delete cascade on update no action\\n      )\");\n        }, reject, resolve);\n        db.transaction(function (tx) {\n          tx.executeSql(\"create table if not exists Cidades (\\n        id int primary key not null,\\n        idCidade int,\\n        idEstado int,\\n        idRegiao int,\\n        nome text,\\n        foreign key () references HistoricoCompra (id) on delete cascade on update no action\\n      )\");\n        }, reject, resolve);\n        db.transaction(function (tx) {\n          tx.executeSql(\"create table if not exists Estados (\\n        id int primary key not null,\\n        idEstado int,\\n        idRegiao int,\\n        idPais,\\n        sigla text,\\n        nome text\\n      )\");\n        }, reject, resolve);\n        db.transaction(function (tx) {\n          tx.executeSql(\"create table if not exists User (\\n        id int primary key not null,\\n        nome text\\n      )\");\n        }, reject, resolve);\n        db.transaction(function (tx) {\n          tx.executeSql(\"create table if not exists Quizz (\\n          id int primary key not null,\\n          numQuizz int,\\n          nome text,\\n          descricao text\\n          )\");\n        }, reject, resolve);\n      });\n    }\n  }, {\n    key: \"addNewColumns\",\n    value: function addNewColumns() {\n      var db = this.getDb();\n      return new Promise(function (resolve) {\n        db.exec([{\n          sql: '',\n          args: []\n        }], false, resolve);\n        resolve();\n      });\n    }\n  }]);\n\n  return Sqlite;\n}();\n\nexport { Sqlite as default };","map":{"version":3,"sources":["D:/Projects/Aula/LocalityMap/db/Sqlite.js"],"names":["SQLite","Sqlite","openDatabase","db","getDb","Promise","resolve","reject","transaction","tx","executeSql","exec","sql","args"],"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;;IAEqBC,M;;;;;;;WACnB,iBAAe;AACb,aAAOD,MAAM,CAACE,YAAP,CAAoB,aAApB,CAAP;AACD;;;WAED,kBAAgB;AACd,UAAMC,EAAE,GAAG,KAAKC,KAAL,EAAX;AAGA,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCJ,QAAAA,EAAE,CAACK,WAAH,CAAe,UAAAC,EAAE,EAAI;AACnBA,UAAAA,EAAE,CAACC,UAAH;AAQD,SATD,EASGH,MATH,EASWD,OATX;AAWAH,QAAAA,EAAE,CAACK,WAAH,CAAe,UAAAC,EAAE,EAAI;AACnBA,UAAAA,EAAE,CAACC,UAAH;AAQD,SATD,EASGH,MATH,EASWD,OATX;AAWAH,QAAAA,EAAE,CAACK,WAAH,CAAe,UAAAC,EAAE,EAAI;AACnBA,UAAAA,EAAE,CAACC,UAAH;AAQD,SATD,EASGH,MATH,EASWD,OATX;AAWAH,QAAAA,EAAE,CAACK,WAAH,CAAe,UAAAC,EAAE,EAAI;AACnBA,UAAAA,EAAE,CAACC,UAAH;AAID,SALD,EAKGH,MALH,EAKWD,OALX;AAOAH,QAAAA,EAAE,CAACK,WAAH,CAAe,UAAAC,EAAE,EAAI;AACnBA,UAAAA,EAAE,CAACC,UAAH;AAMD,SAPD,EAOGH,MAPH,EAOWD,OAPX;AAQD,OAjDM,CAAP;AAkDD;;;WAGD,yBAAuB;AACrB,UAAMH,EAAE,GAAG,KAAKC,KAAL,EAAX;AAGA,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BH,QAAAA,EAAE,CAACQ,IAAH,CAAQ,CACN;AACEC,UAAAA,GAAG,EAAE,EADP;AAEEC,UAAAA,IAAI,EAAE;AAFR,SADM,CAAR,EAKG,KALH,EAKUP,OALV;AAMAA,QAAAA,OAAO;AACR,OARM,CAAP;AASD;;;;;;SA3EkBL,M","sourcesContent":["import * as SQLite from 'expo-sqlite'\r\n\r\nexport default class Sqlite {\r\n  static getDb() {\r\n    return SQLite.openDatabase('LocalityMap')\r\n  }\r\n\r\n  static runDDL() {\r\n    const db = this.getDb()\r\n\r\n    // Executando transaction da DDL do banco\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(`create table if not exists Pais (\r\n        id int primary key not null,\r\n        idPais int,\r\n        idEsta int,\r\n        idRegiao int,\r\n        nome text,\r\n        foreign key () references HistoricoCompra (id) on delete cascade on update no action\r\n      )`)\r\n      }, reject, resolve)\r\n\r\n      db.transaction(tx => {\r\n        tx.executeSql(`create table if not exists Cidades (\r\n        id int primary key not null,\r\n        idCidade int,\r\n        idEstado int,\r\n        idRegiao int,\r\n        nome text,\r\n        foreign key () references HistoricoCompra (id) on delete cascade on update no action\r\n      )`)\r\n      }, reject, resolve)\r\n\r\n      db.transaction(tx => {\r\n        tx.executeSql(`create table if not exists Estados (\r\n        id int primary key not null,\r\n        idEstado int,\r\n        idRegiao int,\r\n        idPais,\r\n        sigla text,\r\n        nome text\r\n      )`)\r\n      }, reject, resolve)\r\n\r\n      db.transaction(tx => {\r\n        tx.executeSql(`create table if not exists User (\r\n        id int primary key not null,\r\n        nome text\r\n      )`)\r\n      }, reject, resolve)\r\n\r\n      db.transaction(tx => {\r\n        tx.executeSql(`create table if not exists Quizz (\r\n          id int primary key not null,\r\n          numQuizz int,\r\n          nome text,\r\n          descricao text\r\n          )`)\r\n      }, reject, resolve)\r\n    })\r\n  }\r\n\r\n  // Adicionar novas colunas nas tabelas\r\n  static addNewColumns() {\r\n    const db = this.getDb()\r\n\r\n    // Executando transaction da DDL do banco\r\n    return new Promise((resolve) => {\r\n      db.exec([\r\n        {\r\n          sql: '',\r\n          args: []\r\n        }\r\n      ], false, resolve)\r\n      resolve()\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}